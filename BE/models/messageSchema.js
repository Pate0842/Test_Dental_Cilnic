import mongoose from "mongoose";
import validator from "validator";

const messageSchema = new mongoose.Schema({
  firstName: {
    type: String,
    required: true,
    minLength: [2, "T√™n ph·∫£i ch·ª©a √≠t nh·∫•t 2 k√Ω t·ª±!"],
  },
  lastName: {
    type: String,
    required: true,
    minLength: [2, "H·ªç ph·∫£i ch·ª©a √≠t nh·∫•t 2 k√Ω t·ª±!"],
  },
  email: {
    type: String,
    required: true,
    validate: [validator.isEmail, "H√£y cung c·∫•p m·ªôt ƒë·ªãa ch·ªâ email h·ª£p l·ªá!"],
  },
  phone: {
    type: String,
    required: true,
    minLength: [10, "S·ªë ƒëi·ªán tho·∫°i ph·∫£i ch·ª©a ƒë√∫ng 10 ch·ªØ s·ªë!"],
    maxLength: [10, "S·ªë ƒëi·ªán tho·∫°i ph·∫£i ch·ª©a ƒë√∫ng 10 ch·ªØ s·ªë!"],
  },
  message: {
    type: String,
    required: true,
    minLength: [10, "Tin nh·∫Øn ph·∫£i ch·ª©a √≠t nh·∫•t 10 k√Ω t·ª±!"],
  },
  type: {
    type: String,
    enum: ["regular", "urgent", "confirmation"],
    default: "regular",
  },
  priority: {
    type: Boolean,
    default: false,
  },
  confirmedAt: {
    type: Date,
  },
});
// üí° Prototype Pattern: Th√™m ph∆∞∆°ng th·ª©c clone()
messageSchema.methods.clone = function () {
  return new this.constructor({
    firstName: this.firstName,
    lastName: this.lastName,
    email: this.email,
    phone: this.phone,
    message: this.message,
    type: this.type,
    priority: this.priority,
    confirmedAt: this.confirmedAt,
  });
};

export const Message = mongoose.model("Message", messageSchema);